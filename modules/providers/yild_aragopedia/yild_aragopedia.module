<?php
/**
 * @file
 * Defines a Aragopedia provider for Yild.
 */

define('YILD_ARAGOPEDIA_API', 'http://opendata.aragon.es/aragopedia/api.php');
define('YILD_ARAGOPEDIA_CACHE_LIFETIME', 86400);
define('YILD_ARAGOPEDIA_MAX_HITS', 30);

/**
 * Implements hook_yild_search().
 *
 * Performs a Yild search specific to Aragopedia.
 */
function yild_aragopedia_yild_search($search_string, $lang = 'es') {
  $baseuri = YILD_ARAGOPEDIA_API;

  //$uri = $baseuri . '?action=query&list=search&srprop=titlesnippet|snippet|timestamp&srsearch=' . rawurlencode($search_string) . '&format=json&srlimit=' . YILD_ARAGOPEDIA_MAX_HITS;
  $uri = $baseuri . '?action=opensearch&search=' . rawurlencode($search_string) . '&format=json&limit=' . YILD_ARAGOPEDIA_MAX_HITS;
  $cache = _yild_aragopedia_get_search_cache($uri);
  if (!empty($cache)) {
    $search_result = $cache;
  }
  else {
    $options = array(
      'method' => 'GET',
      'timeout' => 3,
      'headers' => array(
        'Accept' => 'application/json',
      ),
    );

    $result = drupal_http_request($uri, $options);
    // Only show result if there was no error.
    if (empty($result->error)) {
      $search_result = drupal_json_decode($result->data);
      _yild_aragopedia_put_search_cache($uri, $search_result);
    }
    else {
      // TODO: decide on error handling.
      drupal_set_message('aragopedia: '.$result->error);
      return array();
    }
  }

  if (!empty($search_result[1])) {
    return _yild_aragopedia_parse_result($search_result[1]);
  }
}


/**
 * Simply returns the name of the provider.
 *
 * @return string
 *   The name of the provider.
 */
function yild_aragopedia_yild_get_provider_name() {
  return 'aragopedia';
}

/**
 * Retrieves a search result from Drupal's internal cache.
 *
 * @param string $cid
 *   The cache id to use.
 */
function _yild_aragopedia_get_search_cache($cid) {
  $cache = cache_get($cid, 'yild-cache');
  if (!empty($cache)) {
    if ($cache->expire > time()) {
      return $cache->data;
    }
  }
  return FALSE;
}

/**
 * Saves a search to Drupal's internal cache.
 *
 * @param string $cid
 *   The cache id to use.
 * @param array $data
 *   The data to cache.
 */
function _yild_aragopedia_put_search_cache($cid, array $data) {
  cache_set($cid, $data, 'yild-cache', time() + YILD_ARAGOPEDIA_CACHE_LIFETIME);
}


/**
 * Parses a Aragopedia response to find unique id, name and disambiguation type.
 *
 * @param array $result_set
 *   The result set received from the provider containing the suggestions.
 */
function _yild_aragopedia_parse_result(array $result_set) {
  $ret = array();
  foreach ($result_set as $result) {
    $id = _yild_aragopedia_get_id($result);
    $name = $result;
    $type = _yild_aragopedia_get_type($result);
    if (!empty($id) && !empty($name)) {
      $ret[$id] = array('name' => $name, 'disambiguator' => $type);
    }
  }
  return $ret;
}

/**
 * Extracts either the notable type or the first type from a search result item.
 */
function _yild_aragopedia_get_type($obj) {
  // Aragopedia returns no types or categories in the search result.
  return NULL;
}

/**
 * Returns a Yild-compatible id based on the Aragopedia title.
 *
 * @param string $title
 *   Aragopedia uses the title as unique Id.
 */
function _yild_aragopedia_get_id($title) {
  $id_slug = str_replace(' ', '_', $title);
  return str_replace(' ', '', 'aragopedia:' . $id_slug);
}
